@model veterans_site.ViewModels.UserProfileViewModel
@using veterans_site.Extensions
@{
    ViewData["Title"] = "Мій профіль";
}

<style>
    .profile-section {
        padding: 2rem 0;
        background-color: #f8fafc;
    }

    .profile-card {
        border: none;
        border-radius: 1rem;
        box-shadow: 0 0 30px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }

    .profile-header {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
    }

    .profile-avatar {
        width: 80px;
        height: 80px;
        background: #0d6efd;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 2rem;
        font-weight: 600;
        margin-right: 1.5rem;
        position: relative;
        overflow: hidden;
        background-size: cover;
        background-position: center;
    }

    .profile-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .avatar-upload {
        position: relative;
        display: inline-block;
    }

    .avatar-upload-input {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .avatar-upload-label {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0,0,0,0.5);
        color: white;
        text-align: center;
        padding: 4px;
        font-size: 12px;
        transform: translateY(100%);
        transition: transform 0.3s ease;
    }

    .profile-avatar:hover .avatar-upload-label {
        transform: translateY(0);
    }

    .profile-info label {
        font-size: 0.875rem;
        color: #64748b;
        margin-bottom: 0.25rem;
    }

    .profile-info span {
        font-size: 1rem;
        color: #1e293b;
        font-weight: 500;
    }

    .tab-container {
        background: white;
        border-radius: 1rem;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .nav-tabs {
        border: none;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .nav-tabs .nav-link {
        border: none;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        color: #64748b;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .nav-tabs .nav-link:hover {
        background: #f1f5f9;
    }

    .nav-tabs .nav-link.active {
        background: #0d6efd;
        color: white;
    }

    .list-group-item {
        border: none;
        border-radius: 0.75rem;
        margin-bottom: 1rem;
        padding: 1.5rem;
        background: #f8fafc;
        transition: all 0.3s ease;
    }

    .list-group-item:hover {
        background: #f1f5f9;
    }

    .item-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .item-info {
        color: #64748b;
        font-size: 0.9rem;
    }

    .item-info i {
        width: 20px;
        color: #0d6efd;
        margin-right: 0.5rem;
    }

    .badge {
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-weight: 500;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-sm:hover {
        transform: translateY(-2px);
    }

    .empty-message {
        text-align: center;
        padding: 2rem;
        color: #64748b;
    }

    .status-badge {
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .status-badge i {
        font-size: 1.2rem;
    }

    .alert {
        border-radius: 1rem;
        border: none;
    }

    .card .card-body canvas {
        width: 100% !important;
        height: 250px !important;
    }

    .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #1e293b;
    }

    .car-types-container {
        background-color: #f8f9fa;
        padding: 10px 15px;
        border-radius: 0.5rem;
        border: 1px solid #e2e8f0;
        margin-bottom: 10px;
    }

    .form-check {
        margin-bottom: 8px;
    }
</style>

<div class="profile-section">
    <div class="container">
        <div class="row g-4">
            <div class="col-md-4">
                <div class="profile-card card">
                    <div class="card-body p-4">
                        <div class="profile-header">
                            <div class="profile-avatar avatar-upload"
                                 style="@(string.IsNullOrEmpty(Model.User.AvatarPath) ? "" : $"background-image: url('{Url.Content(Model.User.AvatarPath)}')")">
                                @if (string.IsNullOrEmpty(Model.User.AvatarPath))
                                {
                                    @Model.User.FirstName[0]
                                }
                                <form id="avatarForm" asp-controller="Profile" asp-action="UploadAvatar" method="post" enctype="multipart/form-data">
                                    @Html.AntiForgeryToken()
                                    <input type="file" id="avatarInput" name="avatarFile" class="avatar-upload-input" accept="image/*" />
                                    <label for="avatarInput" class="avatar-upload-label">Змінити фото</label>
                                </form>
                            </div>
                            <div>
                                <h2 class="h4 mb-1">@Model.User.FirstName @Model.User.LastName</h2>
                                <p class="text-muted mb-0">@Model.User.Email</p>
                            </div>
                        </div>

                        <div class="status-badge w-100 mb-4 @(Model.User.IsActive ? "bg-success bg-opacity-10 text-success" : "bg-danger bg-opacity-10 text-danger")">
                            <i class="@(Model.User.IsActive ? "fas fa-check-circle" : "fas fa-exclamation-circle")"></i>
                            @if (Model.User.IsActive)
                            {
                                <span>Аккаунт активний</span>
                            }
                            else
                            {
                                <span>Аккаунт неактивний</span>
                            }
                        </div>

                        <div class="d-flex flex-column gap-2">
                            <a asp-action="EditAccount" class="btn btn-outline-primary">
                                <i class="fas fa-user-edit me-2"></i>Редагувати профіль
                            </a>
                            <a asp-action="ChangePassword" class="btn btn-outline-secondary">
                                <i class="fas fa-key me-2"></i>Змінити пароль
                            </a>
                            <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteAccountModal">
                                <i class="fas fa-user-times me-2"></i>Видалити акаунт
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal fade" id="deleteAccountModal" tabindex="-1" aria-labelledby="deleteAccountModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header bg-danger text-white">
                            <h5 class="modal-title" id="deleteAccountModalLabel">Підтвердження видалення акаунту</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Увага!</strong> Видалення акаунту є незворотньою дією.
                            </div>
                            <p>Ви впевнені, що хочете видалити свій акаунт? Усі ваші дані будуть назавжди видалені з системи.</p>
                            <p>Для підтвердження введіть слово <strong>ВИДАЛИТИ</strong> нижче:</p>
                            <input type="text" id="deleteConfirmationInput" class="form-control" placeholder="ВИДАЛИТИ" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Скасувати</button>
                            <form asp-controller="Profile" asp-action="DeleteAccount" method="post" id="deleteAccountForm">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-danger" id="confirmDeleteBtn" disabled>
                                    <i class="fas fa-user-times me-2"></i>Видалити акаунт
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            
            @if (User.IsInRole("Driver"))
            {
                <div class="col-md-4">
                    <div class="profile-card card">
                        <div class="card-body p-4">
                            <h3 class="h5 mb-3">
                                <i class="fas fa-car-side me-2"></i>Типи автомобіля
                            </h3>
                            
                            <form asp-controller="Profile" asp-action="UpdateCarTypes" method="post">
                                @Html.AntiForgeryToken()
                                
                                <div class="car-types-container mb-3">
                                    @{
                                        var currentCarTypes = Model.User.CarType?.Split(',') ?? new string[0];
                                    }
                                    
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" name="CarTypes" value="Regular" 
                                               id="carTypeRegular" @(currentCarTypes.Contains("Regular") ? "checked" : "")>
                                        <label class="form-check-label" for="carTypeRegular">
                                            Звичайне авто
                                        </label>
                                    </div>
                                    
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" name="CarTypes" value="WithRamp" 
                                               id="carTypeWithRamp" @(currentCarTypes.Contains("WithRamp") ? "checked" : "")>
                                        <label class="form-check-label" for="carTypeWithRamp">
                                            Авто з пандусом або підйомником
                                        </label>
                                    </div>
                                    
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" name="CarTypes" value="WithMedical" 
                                               id="carTypeWithMedical" @(currentCarTypes.Contains("WithMedical") ? "checked" : "")>
                                        <label class="form-check-label" for="carTypeWithMedical">
                                            Авто з медичним обладнанням
                                        </label>
                                    </div>
                                    
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" name="CarTypes" value="WithAssistant" 
                                               id="carTypeWithAssistant" @(currentCarTypes.Contains("WithAssistant") ? "checked" : "")>
                                        <label class="form-check-label" for="carTypeWithAssistant">
                                            Авто з супроводжуючим
                                        </label>
                                    </div>
                                </div>
                                
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-save me-2"></i>Зберегти зміни
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
            
            <div class="col-md-@(User.IsInRole("Driver") ? "4" : "8")">
                @if (User.IsInRole("Veteran"))
                {
                    <div class="profile-card card mb-4">
                        <div class="card-body p-4">
                            <h3 class="h4 mb-4">Мої консультації</h3>

                            <ul class="nav nav-tabs">
                                <li class="nav-item">
                                    <a class="nav-link active" data-bs-toggle="tab" href="#upcoming">
                                        <i class="fas fa-calendar-alt me-2"></i>Заплановані
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#past">
                                        <i class="fas fa-history me-2"></i>Минулі
                                    </a>
                                </li>
                            </ul>

                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="upcoming">
                                    @if (Model.UpcomingConsultations.Any())
                                    {
                                        <div class="list-group">
                                            @foreach (var consultation in Model.UpcomingConsultations)
                                            {
                                                <div class="list-group-item">
                                                    <div class="d-flex justify-content-between align-items-start">
                                                        <div class="flex-grow-1">
                                                            <h5 class="item-title">@consultation.Title</h5>
                                                            <div class="d-flex gap-2 mb-3">
                                                                <span class="badge bg-primary">@consultation.Format.GetDisplayName()</span>
                                                                <span class="badge bg-info">@consultation.Mode.GetDisplayName()</span>
                                                            </div>
                                                            <div class="item-info">
                                                                <p class="mb-2">
                                                                    <i class="far fa-calendar-alt"></i>
                                                                    @consultation.DateTime.ToString("dd.MM.yyyy HH:mm")
                                                                </p>
                                                                <p class="mb-2">
                                                                    <i class="far fa-clock"></i>
                                                                    Тривалість: @consultation.Duration хв
                                                                </p>
                                                                <p class="mb-2">
                                                                    <i class="fas fa-user-md"></i>
                                                                    @consultation.SpecialistName
                                                                </p>
                                                                @if (consultation.Mode == ConsultationMode.Offline)
                                                                {
                                                                    <p class="mb-2">
                                                                        <i class="fas fa-map-marker-alt"></i>
                                                                        @consultation.Location
                                                                    </p>
                                                                }
                                                            </div>
                                                        </div>
                                                        <div class="d-flex flex-column gap-2">
                                                            @if (consultation.Status != ConsultationStatus.Cancelled)
                                                            {
                                                                <form asp-controller="Consultations" asp-action="Cancel"
                                                                      method="post" onsubmit="return confirm('Ви впевнені?');">
                                                                    @Html.AntiForgeryToken()
                                                                    <input type="hidden" name="consultationId" value="@consultation.Id"/>
                                                                    <button type="submit" class="btn btn-danger btn-sm">
                                                                        <i class="fas fa-times me-2"></i>Скасувати
                                                                    </button>
                                                                </form>
                                                            }
                                                            <a asp-action="ConsultationDetails" asp-route-id="@consultation.Id"
                                                               class="btn btn-outline-primary btn-sm">
                                                                <i class="fas fa-info-circle me-2"></i>Деталі
                                                            </a>
                                                            <a asp-controller="Consultations" asp-action="GeneratePDF" asp-route-id="@consultation.Id"
                                                               class="btn btn-outline-secondary btn-sm">
                                                                <i class="fas fa-file-pdf me-2"></i>Сформувати PDF
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="empty-message">
                                            <i class="far fa-calendar-times fa-3x mb-3"></i>
                                            <p>Немає запланованих консультацій</p>
                                        </div>
                                    }
                                </div>

                                <div class="tab-pane fade" id="past">
                                    @if (Model.PastConsultations.Any())
                                    {
                                        <div class="list-group">
                                            @foreach (var consultation in Model.PastConsultations)
                                            {
                                                <div class="list-group-item">
                                                    <div class="d-flex justify-content-between align-items-start">
                                                        <div class="flex-grow-1">
                                                            <h5 class="item-title">@consultation.Title</h5>
                                                            <div class="d-flex gap-2 mb-3">
                                                                <span class="badge bg-primary">@consultation.Format.GetDisplayName()</span>
                                                                <span class="badge bg-info">@consultation.Mode.GetDisplayName()</span>
                                                            </div>
                                                            <div class="item-info">
                                                                <p class="mb-2">
                                                                    <i class="far fa-calendar-alt"></i>
                                                                    @consultation.DateTime.ToString("dd.MM.yyyy HH:mm")
                                                                </p>
                                                                <p class="mb-2">
                                                                    <i class="far fa-clock"></i>
                                                                    Тривалість: @consultation.Duration хв
                                                                </p>
                                                                <p class="mb-2">
                                                                    <i class="fas fa-user-md"></i>
                                                                    @consultation.SpecialistName
                                                                </p>
                                                                @if (consultation.Mode == ConsultationMode.Offline)
                                                                {
                                                                    <p class="mb-2">
                                                                        <i class="fas fa-map-marker-alt"></i>
                                                                        @consultation.Location
                                                                    </p>
                                                                }
                                                            </div>
                                                        </div>
                                                        <div class="d-flex flex-column gap-2">
                                                            <a asp-action="ConsultationDetails" asp-route-id="@consultation.Id"
                                                               class="btn btn-outline-primary btn-sm">
                                                                <i class="fas fa-info-circle me-2"></i>Деталі
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="empty-message">
                                            <i class="far fa-calendar-times fa-3x mb-3"></i>
                                            <p>Немає минулих консультацій</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="profile-card card">
                        <div class="card-body p-4">
                            <h3 class="h4 mb-4">Мої події</h3>
                            <ul class="nav nav-tabs">
                                <li class="nav-item">
                                    <a class="nav-link active" data-bs-toggle="tab" href="#upcomingEvents">
                                        <i class="fas fa-calendar-alt me-2"></i>Заплановані
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#pastEvents">
                                        <i class="fas fa-history me-2"></i>Минулі
                                    </a>
                                </li>
                            </ul>

                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="upcomingEvents">
                                    @if (Model.UpcomingEvents.Any())
                                    {
                                        <div class="list-group">
                                            @foreach (var evt in Model.UpcomingEvents)
                                            {
                                                <div class="list-group-item">
                                                    <div class="d-flex justify-content-between align-items-start">
                                                        <div class="flex-grow-1">
                                                            <h5 class="item-title">@evt.Title</h5>
                                                            <div class="d-flex gap-2 mb-3">
                                                                <span class="badge bg-primary">@evt.Category.GetDisplayName()</span>
                                                            </div>
                                                            <div class="item-info">
                                                                <p class="mb-2">
                                                                    <i class="far fa-calendar-alt"></i>
                                                                    @evt.Date.ToString("dd.MM.yyyy HH:mm")
                                                                </p>
                                                                <p class="mb-2">
                                                                    <i class="fas fa-map-marker-alt"></i>
                                                                    @evt.Location
                                                                </p>
                                                            </div>
                                                        </div>
                                                        <div class="d-flex flex-column gap-2">
                                                            <form asp-controller="Profile" asp-action="CancelEvent"
                                                                  method="post" onsubmit="return confirm('Ви впевнені?');">
                                                                @Html.AntiForgeryToken()
                                                                <input type="hidden" name="id" value="@evt.Id"/>
                                                                <button type="submit" class="btn btn-danger btn-sm">
                                                                    <i class="fas fa-times me-2"></i>Скасувати
                                                                </button>
                                                            </form>
                                                            <a asp-action="EventDetails" asp-route-id="@evt.Id"
                                                               class="btn btn-outline-primary btn-sm">
                                                                <i class="fas fa-info-circle me-2"></i>Деталі
                                                            </a>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="empty-message">
                                            <i class="far fa-calendar-times fa-3x mb-3"></i>
                                            <p>Немає запланованих подій</p>
                                        </div>
                                    }
                                </div>

                                <div class="tab-pane fade" id="pastEvents">
                                    @if (Model.PastEvents.Any())
                                    {
                                        <div class="list-group">
                                            @foreach (var evt in Model.PastEvents)
                                            {
                                                <div class="list-group-item">
                                                    <div class="d-flex justify-content-between align-items-start">
                                                        <div class="flex-grow-1">
                                                            <h5 class="item-title">@evt.Title</h5>
                                                            <div class="d-flex gap-2 mb-3">
                                                                <span class="badge bg-primary">@evt.Category.GetDisplayName()</span>
                                                            </div>
                                                            <div class="item-info">
                                                                <p class="mb-2">
                                                                    <i class="far fa-calendar-alt"></i>
                                                                    @evt.Date.ToString("dd.MM.yyyy HH:mm")
                                                                </p>
                                                                <p class="mb-2">
                                                                    <i class="fas fa-map-marker-alt"></i>
                                                                    @evt.Location
                                                                </p>
                                                            </div>
                                                        </div>
                                                        <a asp-action="EventDetails" asp-route-id="@evt.Id"
                                                           class="btn btn-outline-primary btn-sm">
                                                            <i class="fas fa-info-circle me-2"></i>Деталі
                                                        </a>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="empty-message">
                                            <i class="far fa-calendar-times fa-3x mb-3"></i>
                                            <p>Немає минулих подій</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <div class="admin-stats-section mt-4">
                <div class="card profile-card">
                    <div class="card-body p-4">
                        <h3 class="h4 mb-4">
                            <i class="fas fa-chart-line me-2"></i>Статистика платформи
                        </h3>
                        
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="card bg-primary bg-opacity-10 h-100">
                                    <div class="card-body text-center">
                                        <i class="fas fa-users fa-2x mb-2 text-primary"></i>
                                        <h5 class="counter-value mb-1" id="totalUsers">0</h5>
                                        <p class="mb-0 text-muted">Користувачів</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-success bg-opacity-10 h-100">
                                    <div class="card-body text-center">
                                        <i class="fas fa-user-md fa-2x mb-2 text-success"></i>
                                        <h5 class="counter-value mb-1" id="totalConsultations">0</h5>
                                        <p class="mb-0 text-muted">Консультацій</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-info bg-opacity-10 h-100">
                                    <div class="card-body text-center">
                                        <i class="fas fa-calendar-check fa-2x mb-2 text-info"></i>
                                        <h5 class="counter-value mb-1" id="totalEvents">0</h5>
                                        <p class="mb-0 text-muted">Подій</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-warning bg-opacity-10 h-100">
                                    <div class="card-body text-center">
                                        <i class="fas fa-newspaper fa-2x mb-2 text-warning"></i>
                                        <h5 class="counter-value mb-1" id="totalNews">0</h5>
                                        <p class="mb-0 text-muted">Новин</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Розподіл консультацій за типами</h5>
                                        <div class="chart-container" style="position: relative; height:250px;">
                                            <canvas id="consultationTypesChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Статуси консультацій</h5>
                                        <div class="chart-container" style="position: relative; height:250px;">
                                            <canvas id="consultationStatusChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Динаміка консультацій за останні 6 місяців</h5>
                                        <div class="chart-container" style="position: relative; height:250px;">
                                            <canvas id="consultationTrendChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Розподіл подій за категоріями</h5>
                                        <div class="chart-container" style="position: relative; height:250px;">
                                            <canvas id="eventCategoriesChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Заповненість подій (% від максимальної кількості)</h5>
                                        <div class="chart-container" style="position: relative; height:250px;">
                                            <canvas id="eventAttendanceChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">Динаміка реєстрацій користувачів</h5>
                                        <div class="chart-container" style="position: relative; height:250px;">
                                            <canvas id="userRegistrationChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <br/>
        @if (User.IsInRole("Driver"))
        {
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5><i class="fas fa-chart-line me-2"></i>Статистика моїх поїздок</h5>
                </div>
                <div class="card-body p-4">
                    <div class="row mb-4">
                        <div class="col-md-4">
                            <div class="card bg-primary bg-opacity-10 h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-car fa-2x mb-2 text-primary"></i>
                                    <h5 class="counter-value mb-1" id="totalRides">0</h5>
                                    <p class="mb-0 text-muted">Всього поїздок</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-success bg-opacity-10 h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-route fa-2x mb-2 text-success"></i>
                                    <h5 class="counter-value mb-1" id="totalDistance">0</h5>
                                    <p class="mb-0 text-muted">Загальна відстань, км</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-info bg-opacity-10 h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-calendar-check fa-2x mb-2 text-info"></i>
                                    <h5 class="counter-value mb-1" id="totalScheduled">0</h5>
                                    <p class="mb-0 text-muted">Заплановані поїздки</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Мої поїздки за останні 7 днів</h5>
                                    <div class="chart-container" style="position: relative; height:250px;">
                                        <canvas id="ridesByDayChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Статистика поїздок за типом</h5>
                                    <div class="chart-container" style="position: relative; height:250px;">
                                        <canvas id="rideTypeChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Статуси поїздок</h5>
                                    <div class="chart-container" style="position: relative; height:250px;">
                                        <canvas id="rideStatusChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Популярні маршрути</h5>
                                    <div class="chart-container" style="position: relative; height:250px;">
                                        <canvas id="popularRoutesChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Години активності</h5>
                                    <div class="chart-container" style="position: relative; height:250px;">
                                        <canvas id="activityHoursChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Заплановані vs Звичайні поїздки</h5>
                                    <div class="chart-container" style="position: relative; height:250px;">
                                        <canvas id="ridePlanningChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.getElementById('avatarInput').addEventListener('change', function() {
            document.getElementById('avatarForm').submit();
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const avatarInput = document.getElementById('avatarInput');
            const avatarForm = document.getElementById('avatarForm');
            const carTypesForm = document.querySelector('form[action*="UpdateCarTypes"]');
            const deleteConfirmationInput = document.getElementById('deleteConfirmationInput');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const alerts = document.querySelectorAll('.alert');
            const hash = window.location.hash;
            const chartInstances = {};

            if (avatarInput && avatarForm) {
                window.ajaxRequestInProgress = false;
                let uploadInProgress = false;

                avatarInput.addEventListener('change', function() {
                    if (uploadInProgress) {
                        console.warn('Завантаження вже виконується, дочекайтесь завершення');
                        return;
                    }

                    if (this.files && this.files[0]) {
                        const maxSize = 10 * 1024 * 1024;
                        if (this.files[0].size > maxSize) {
                            toastr.error('Файл занадто великий. Максимальний розмір 10MB');
                            return;
                        }

                        uploadInProgress = true;
                        window.ajaxRequestInProgress = true;

                        const reader = new FileReader();

                        reader.onload = function(e) {
                            const avatar = document.querySelector('.profile-avatar');
                            if (avatar) {
                                const originalBackground = avatar.style.backgroundImage;
                                avatar.style.backgroundImage = `url(${e.target.result})`;
                                avatar.innerHTML = '';

                                const tokenElement = document.querySelector('form input[name="__RequestVerificationToken"]');
                                const csrfToken = tokenElement ? tokenElement.value : null;

                                if (!csrfToken) {
                                    console.error('CSRF token not found');
                                    toastr.error('Помилка автентифікації. Оновіть сторінку і спробуйте знову.');
                                    uploadInProgress = false;
                                    window.ajaxRequestInProgress = false;
                                    return;
                                }

                                const formData = new FormData();
                                formData.append('avatarFile', avatarInput.files[0]);
                                formData.append('__RequestVerificationToken', csrfToken);

                                const loadingToast = toastr.info(
                                    '<div class="text-center"><div class="spinner-border spinner-border-sm me-2" role="status"></div>Завантаження аватарки...</div>',
                                    'Зачекайте',
                                    {
                                        timeOut: 0,
                                        extendedTimeOut: 0,
                                        closeButton: false,
                                        tapToDismiss: false,
                                        escapeHtml: false
                                    }
                                );

                                fetch(avatarForm.action, {
                                    method: 'POST',
                                    body: formData,
                                    headers: {
                                        'X-Requested-With': 'XMLHttpRequest'
                                    }
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error(`HTTP error! Status: ${response.status}`);
                                        }

                                        const contentType = response.headers.get('content-type');
                                        if (contentType && contentType.includes('application/json')) {
                                            return response.json();
                                        }

                                        if (response.redirected) {
                                            return { success: true, redirect: response.url };
                                        }

                                        return { success: true, message: "Аватар успішно оновлено" };
                                    })
                                    .then(data => {
                                        toastr.clear(loadingToast);

                                        if (data) {
                                            if (data.success) {
                                                toastr.success(data.message || "Аватар успішно оновлено");
                                            } else {
                                                toastr.error(data.message || "Помилка при завантаженні аватарки");
                                                avatar.style.backgroundImage = originalBackground;
                                            }
                                        }

                                        avatarInput.value = '';
                                        uploadInProgress = false;

                                        setTimeout(() => {
                                            window.ajaxRequestInProgress = false;
                                        }, 500);
                                    })
                                    .catch(error => {
                                        toastr.clear(loadingToast);

                                        console.error('Error:', error);
                                        toastr.error("Помилка при завантаженні аватарки");

                                        avatar.style.backgroundImage = originalBackground;

                                        avatarInput.value = '';
                                        uploadInProgress = false;

                                        setTimeout(() => {
                                            window.ajaxRequestInProgress = false;
                                        }, 500);
                                    });
                            }
                        };

                        reader.readAsDataURL(this.files[0]);
                    }
                });
            } else {
                console.error('Не вдалося знайти необхідні елементи для завантаження аватара');
            }
            
            if (carTypesForm) {
                carTypesForm.addEventListener('submit', function(e) {
                    const checkboxes = this.querySelectorAll('input[name="CarTypes"]');
                    let isChecked = false;

                    checkboxes.forEach(checkbox => {
                        if (checkbox.checked) {
                            isChecked = true;
                        }
                    });

                    if (!isChecked) {
                        e.preventDefault();
                        alert('Будь ласка, виберіть хоча б один тип автомобіля');
                    }
                });
            }

            deleteConfirmationInput.addEventListener('input', function() {
                if (this.value === 'ВИДАЛИТИ') {
                    confirmDeleteBtn.disabled = false;
                } else {
                    confirmDeleteBtn.disabled = true;
                }
            });

            alerts.forEach(alert => {
                setTimeout(() => {
                    alert.classList.add('fade');
                    setTimeout(() => {
                        alert.remove();
                    }, 500);
                }, 3000);
            });

            if (hash) {
                const tab = document.querySelector(`a[href="${hash}"]`);
                if (tab) {
                    tab.click();
                }
            }

            const isAdminCharts = document.querySelector('.admin-stats-section');

            const isDriverCharts = document.querySelector('h5 i.fas.fa-chart-line');

            if (isAdminCharts) {
                console.log('Завантаження статистики для адміністратора...');

                const chartContainers = isAdminCharts.querySelectorAll('.chart-container');

                prepareAdminChartElements(chartContainers);

                loadStatistics();
            }

            if (isDriverCharts) {
                console.log('Завантаження статистики для водія...');

                prepareDriverChartElements();

                loadDriverStatistics();
            }

            function prepareAdminChartElements(containers) {
                if (!containers || containers.length === 0) {
                    console.warn('Не знайдено контейнери для графіків адміністратора');
                    return;
                }

                const chartIds = [
                    'consultationTypesChart',
                    'consultationStatusChart',
                    'consultationTrendChart',
                    'eventCategoriesChart',
                    'eventAttendanceChart',
                    'userRegistrationChart'
                ];

                containers.forEach((container, index) => {
                    const existingCanvas = container.querySelector('canvas');

                    if (!existingCanvas || !chartIds.includes(existingCanvas.id)) {
                        while (container.firstChild) {
                            container.removeChild(container.firstChild);
                        }

                        const canvas = document.createElement('canvas');

                        const cardBody = container.closest('.card-body');
                        if (cardBody) {
                            const title = cardBody.querySelector('.card-title')?.textContent || '';

                            if (title.includes('типами')) {
                                canvas.id = 'consultationTypesChart';
                            } else if (title.includes('Статуси консультацій')) {
                                canvas.id = 'consultationStatusChart';
                            } else if (title.includes('Динаміка консультацій')) {
                                canvas.id = 'consultationTrendChart';
                            } else if (title.includes('Розподіл подій')) {
                                canvas.id = 'eventCategoriesChart';
                            } else if (title.includes('Заповненість подій')) {
                                canvas.id = 'eventAttendanceChart';
                            } else if (title.includes('Динаміка реєстрацій')) {
                                canvas.id = 'userRegistrationChart';
                            } else {
                                canvas.id = chartIds[index % chartIds.length];
                            }
                        } else {
                            canvas.id = chartIds[index % chartIds.length];
                        }

                        console.log(`Створено canvas з ID: ${canvas.id}`);
                        container.appendChild(canvas);
                    }
                });
            }

            function animateCounters() {
                const counters = document.querySelectorAll('.counter-value[data-target]');
                if (!counters.length) return;

                const speed = 200;

                counters.forEach(counter => {
                    const target = +(counter.getAttribute('data-target') || 0);
                    const count = +(counter.innerText || 0);
                    const increment = target / speed;

                    if (count < target) {
                        counter.innerText = Math.ceil(count + increment);
                        setTimeout(animateCounters, 1);
                    } else {
                        counter.innerText = target;
                    }
                });
            }

            async function loadStatistics() {
                try {
                    const adminSection = document.querySelector('.admin-stats-section');
                    if (!adminSection) {
                        console.info('Секція статистики адміністратора не знайдена. Пропускаємо завантаження.');
                        return;
                    }

                    const chartElementIds = [
                        'consultationTypesChart',
                        'consultationStatusChart',
                        'consultationTrendChart',
                        'eventCategoriesChart',
                        'eventAttendanceChart',
                        'userRegistrationChart'
                    ];

                    const foundElements = chartElementIds.filter(id => document.getElementById(id));

                    if (foundElements.length === 0) {
                        console.info('Жоден з елементів для графіків адміністратора не знайдений. Пропускаємо завантаження.');
                        const chartContainers = adminSection.querySelectorAll('.chart-container');
                        if (chartContainers.length > 0) {
                            console.log('Знайдено контейнери для графіків. Спробуємо створити canvas елементи.');
                            prepareAdminChartElements(chartContainers);
                        } else {
                            console.error('Контейнери для графіків не знайдені.');
                            return;
                        }
                    }

                    console.log(`Знайдено ${foundElements.length} елементів для графіків: ${foundElements.join(', ')}`);

                    let data;
                    try {
                        const response = await fetch('@Url.Action("GetDashboardData", "Statistics", new { area = "Admin" })');

                        if (!response.ok) {
                            throw new Error(`Помилка завантаження даних: ${response.status} ${response.statusText}`);
                        }

                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('application/json')) {
                            throw new Error(`Отримано не JSON відповідь: ${contentType}`);
                        }

                        data = await response.json();
                    } catch (fetchError) {
                        console.warn('Використовуємо тестові дані через помилку API:', fetchError);
                        data = {
                            totalUsers: 120,
                            totalConsultations: 85,
                            totalEvents: 32,
                            totalNews: 47,
                            consultationTypes: [
                                { label: 'Медичні', value: 32 },
                                { label: 'Психологічні', value: 41 },
                                { label: 'Юридичні', value: 12 }
                            ],
                            consultationStatuses: [
                                { label: 'Заплановані', value: 25 },
                                { label: 'Завершені', value: 50 },
                                { label: 'Скасовані', value: 10 }
                            ],
                            consultationTrend: {
                                labels: ['Січень', 'Лютий', 'Березень', 'Квітень', 'Травень', 'Червень'],
                                data: [10, 15, 8, 12, 20, 18]
                            },
                            eventCategories: [
                                { label: 'Зустріч', value: 8 },
                                { label: 'Тренінг', value: 12 },
                                { label: 'Майстер-клас', value: 6 },
                                { label: 'Соціальний захід', value: 6 }
                            ],
                            eventAttendance: [
                                { label: 'Зустріч', percentage: 78 },
                                { label: 'Тренінг', percentage: 92 },
                                { label: 'Майстер-клас', percentage: 85 },
                                { label: 'Соціальний захід', percentage: 65 }
                            ],
                            userRegistrations: {
                                labels: ['Грудень', 'Січень', 'Лютий', 'Березень', 'Квітень', 'Травень'],
                                data: [8, 12, 15, 22, 18, 25]
                            }
                        };
                    }

                    updateCounterIfExists('totalUsers', data.totalUsers);
                    updateCounterIfExists('totalConsultations', data.totalConsultations);
                    updateCounterIfExists('totalEvents', data.totalEvents);
                    updateCounterIfExists('totalNews', data.totalNews);

                    animateCounters();
                    initCharts(data);

                } catch (error) {
                    console.error('Помилка завантаження статистики адміністратора:', error);
                }
            }

            function updateCounterIfExists(elementId, value) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.textContent = value;
                    element.setAttribute('data-target', value);
                }
            }

            function initCharts(data) {
                function createChartSafely(elementId, chartConfig) {
                    const canvas = document.getElementById(elementId);
                    if (!canvas) {
                        console.warn(`Елемент з ID "${elementId}" не знайдено. Пропускаємо створення графіка.`);
                        return null;
                    }

                    try {
                        if (chartInstances[elementId]) {
                            chartInstances[elementId].destroy();
                        }

                        const ctx = canvas.getContext('2d');
                        const newChart = new Chart(ctx, chartConfig);
                        chartInstances[elementId] = newChart;
                        console.log(`Графік "${elementId}" успішно створено.`);
                        return newChart;
                    } catch (error) {
                        console.error(`Помилка при створенні графіка для "${elementId}":`, error);
                        return null;
                    }
                }

                const chartConfigs = [
                    {
                        id: 'consultationTypesChart',
                        config: {
                            type: 'pie',
                            data: {
                                labels: ['Медичні', 'Психологічні', 'Юридичні'],
                                datasets: [{
                                    data: data.consultationTypes ? data.consultationTypes.map(x => x.value) : [0, 0, 0],
                                    backgroundColor: [
                                        'rgba(255, 99, 132, 0.7)',
                                        'rgba(54, 162, 235, 0.7)',
                                        'rgba(255, 206, 86, 0.7)'
                                    ],
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'right',
                                    }
                                }
                            }
                        }
                    },
                    {
                        id: 'consultationStatusChart',
                        config: {
                            type: 'doughnut',
                            data: {
                                labels: ['Завершені', 'Заплановані', 'Скасовані'],
                                datasets: [{
                                    data: data.consultationStatuses ? [
                                        data.consultationStatuses.find(x => x.label === 'Completed')?.value || 0,
                                        data.consultationStatuses.find(x => x.label === 'Scheduled')?.value || 0,
                                        data.consultationStatuses.find(x => x.label === 'Cancelled')?.value || 0
                                    ] : [0, 0, 0],
                                    backgroundColor: [
                                        'rgba(75, 192, 192, 0.7)',
                                        'rgba(54, 162, 235, 0.7)',
                                        'rgba(255, 99, 132, 0.7)'
                                    ],
                                    borderColor: [
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 99, 132, 1)'
                                    ],
                                    borderWidth: 2
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'right',
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function(context) {
                                                return `${context.label}: ${context.raw}`;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        id: 'consultationTrendChart',
                        config: {
                            type: 'line',
                            data: {
                                labels: data.consultationTrend ? data.consultationTrend.labels : [],
                                datasets: [{
                                    label: 'Кількість консультацій',
                                    data: data.consultationTrend ? data.consultationTrend.data : [],
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    backgroundColor: 'rgba(54, 162, 235, 0.1)',
                                    borderWidth: 3,
                                    pointBackgroundColor: 'rgba(54, 162, 235, 0.7)',
                                    pointRadius: 5,
                                    pointHoverRadius: 7,
                                    fill: true,
                                    tension: 0.3
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        display: true,
                                        position: 'top',
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function(context) {
                                                return `${context.dataset.label}: ${context.raw}`;
                                            }
                                        }
                                    }
                                },
                                scales: {
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Місяць',
                                            font: {
                                                weight: 'bold'
                                            }
                                        },
                                        grid: {
                                            display: false
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: true,
                                            text: 'Кількість консультацій',
                                            font: {
                                                weight: 'bold'
                                            }
                                        },
                                        beginAtZero: true,
                                        ticks: {
                                            precision: 0,
                                            stepSize: 1
                                        },
                                        grid: {
                                            color: 'rgba(0, 0, 0, 0.05)'
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        id: 'eventCategoriesChart',
                        config: {
                            type: 'bar',
                            data: {
                                labels: ['Зустріч', 'Тренінг', 'Майстер-клас', 'Соціальний захід'],
                                datasets: [{
                                    label: 'Кількість подій',
                                    data: data.eventCategories ? data.eventCategories.map(x => x.value) : [0, 0, 0, 0],
                                    backgroundColor: [
                                        'rgba(255, 99, 132, 0.7)',
                                        'rgba(54, 162, 235, 0.7)',
                                        'rgba(255, 206, 86, 0.7)',
                                        'rgba(75, 192, 192, 0.7)'
                                    ]
                                }]
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        ticks: {
                                            precision: 0
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        id: 'eventAttendanceChart',
                        config: {
                            type: 'bar',
                            data: {
                                labels: ['Зустріч', 'Тренінг', 'Майстер-клас', 'Соціальний захід'],
                                datasets: [{
                                    label: '% заповненості',
                                    data: data.eventAttendance ? data.eventAttendance.map(x => x.percentage) : [0, 0, 0, 0],
                                    backgroundColor: 'rgba(75, 192, 192, 0.7)'
                                }]
                            },
                            options: {
                                indexAxis: 'y',
                                scales: {
                                    x: {
                                        beginAtZero: true,
                                        max: 100,
                                        title: { display: true, text: 'Відсоток заповненості' }
                                    }
                                }
                            }
                        }
                    },
                    {
                        id: 'userRegistrationChart',
                        config: {
                            type: 'line',
                            data: {
                                labels: data.userRegistrations ? data.userRegistrations.labels : [],
                                datasets: [{
                                    label: 'Нові користувачі',
                                    data: data.userRegistrations ? data.userRegistrations.data : [],
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                    borderWidth: 2,
                                    pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                                    pointRadius: 4,
                                    pointHoverRadius: 6,
                                    fill: true,
                                    tension: 0.3
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'top',
                                        labels: {
                                            font: {
                                                size: 14
                                            }
                                        }
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function(context) {
                                                return `${context.dataset.label}: ${context.raw}`;
                                            }
                                        }
                                    }
                                },
                                scales: {
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Місяць',
                                            font: {
                                                size: 12,
                                                weight: 'bold'
                                            }
                                        },
                                        grid: {
                                            display: false
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: true,
                                            text: 'Кількість реєстрацій',
                                            font: {
                                                size: 12,
                                                weight: 'bold'
                                            }
                                        },
                                        beginAtZero: true,
                                        ticks: {
                                            precision: 0,
                                            stepSize: 1
                                        },
                                        grid: {
                                            color: 'rgba(0, 0, 0, 0.05)'
                                        }
                                    }
                                },
                                interaction: {
                                    intersect: false,
                                    mode: 'index'
                                }
                            }
                        }
                    }
                ];

                chartConfigs.forEach(chart => {
                    createChartSafely(chart.id, chart.config);
                });
            }
        });
        
        function animateCountersDriver() {
            const counters = document.querySelectorAll('.counter-value');

            counters.forEach(counter => {
                const target = parseFloat(counter.getAttribute('data-target'));
                const duration = 1000;
                const start = 0;
                const increment = target / (duration / 16);

                let current = start;
                const animateCount = () => {
                    current += increment;

                    if (current < target) {
                        if (counter.id === 'totalDistance') {
                            counter.textContent = Math.round(current * 100) / 100;
                        } else {
                            counter.textContent = Math.floor(current);
                        }
                        requestAnimationFrame(animateCount);
                    } else {
                        if (counter.id === 'totalDistance') {
                            counter.textContent = (Math.round(target * 100) / 100).toFixed(2);
                        } else {
                            counter.textContent = target;
                        }
                    }
                };

                animateCount();
            });
        }

        function prepareDriverChartElements() {
            const driverSection = document.querySelector('.card-header.bg-primary.text-white')?.closest('.card');
            if (!driverSection) {
                console.warn('Не знайдено секцію для графіків водія');
                return false;
            }

            const chartContainers = driverSection.querySelectorAll('.chart-container');
            if (!chartContainers || chartContainers.length === 0) {
                console.warn('Не знайдено контейнери для графіків водія');
                return false;
            }

            console.log(`Знайдено ${chartContainers.length} контейнерів для графіків водія`);

            const driverChartIds = [
                'ridesByDayChart',
                'rideTypeChart',
                'rideStatusChart',
                'popularRoutesChart',
                'activityHoursChart',
                'ridePlanningChart'
            ];

            let index = 0;
            chartContainers.forEach((container) => {
                while (container.firstChild) {
                    container.removeChild(container.firstChild);
                }

                const cardBody = container.closest('.card-body');
                if (!cardBody) {
                    console.warn('Не знайдено card-body для контейнера графіка');
                    return;
                }

                const title = cardBody.querySelector('.card-title')?.textContent || '';
                const canvas = document.createElement('canvas');

                if (title.includes('останні 7 днів')) {
                    canvas.id = 'ridesByDayChart';
                } else if (title.includes('за типом')) {
                    canvas.id = 'rideTypeChart';
                } else if (title.includes('Статуси')) {
                    canvas.id = 'rideStatusChart';
                } else if (title.includes('Популярні маршрути')) {
                    canvas.id = 'popularRoutesChart';
                } else if (title.includes('Години активності')) {
                    canvas.id = 'activityHoursChart';
                } else if (title.includes('Заплановані vs Звичайні')) {
                    canvas.id = 'ridePlanningChart';
                } else {
                    canvas.id = driverChartIds[index % driverChartIds.length];
                }

                index++;
                console.log(`Створено canvas для водія з ID: ${canvas.id} для заголовка: "${title}"`);
                container.appendChild(canvas);
            });

            return true;
        }
        
        const chartInstances = {};

        async function loadDriverStatistics() {
            try {
                const driverSection = document.querySelectorAll('.card-header.bg-primary.text-white');
                if (!driverSection.length) {
                    console.info('Секція статистики водія не знайдена. Пропускаємо завантаження.');
                    return;
                }

                console.log('Знайдено секцію для водія, готуємо елементи для графіків...');

                const elementsReady = prepareDriverChartElements();
                if (!elementsReady) {
                    console.error('Не вдалося підготувати елементи для графіків водія');
                    return;
                }

                Object.keys(chartInstances).forEach(chartId => {
                    if (chartInstances[chartId]) {
                        chartInstances[chartId].destroy();
                        delete chartInstances[chartId];
                    }
                });

                const chartIds = [
                    'ridesByDayChart',
                    'rideTypeChart',
                    'rideStatusChart',
                    'popularRoutesChart',
                    'activityHoursChart',
                    'ridePlanningChart'
                ];

                const foundElements = chartIds.filter(id => document.getElementById(id));
                console.log(`Знайдено ${foundElements.length} елементів canvas: ${foundElements.join(', ')}`);

                if (foundElements.length === 0) {
                    console.error('Жоден з елементів canvas не був створений. Повторюємо спробу...');
                    prepareDriverChartElements();
                    const recheckedElements = chartIds.filter(id => document.getElementById(id));
                    if (recheckedElements.length === 0) {
                        console.error('Не вдалося створити елементи canvas після повторної спроби');
                        return;
                    }
                }

                let data;
                try {
                    const response = await fetch('/Profile/GetDriverStatistics');
                    if (!response.ok) {
                        throw new Error('Помилка завантаження даних з сервера');
                    }
                    data = await response.json();
                } catch (fetchError) {
                    console.warn('Використовуємо тестові дані через помилку API:', fetchError);
                    data = {
                        totalRides: 128,
                        totalDistance: 1542.72,
                        scheduledRides: 15,
                        ridesByDay: {
                            labels: ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Нд'],
                            data: [5, 8, 7, 12, 15, 20, 10]
                        },
                        rideStatuses: [85, 15, 28],
                        popularRoutes: [
                            { name: 'Центр - Аеропорт', count: 23 },
                            { name: 'Вокзал - Центр', count: 18 },
                            { name: 'ТРЦ - Спальний район', count: 15 },
                            { name: 'Університет - Гуртожиток', count: 12 },
                            { name: 'Лікарня - Житловий масив', count: 9 }
                        ],
                        activityHours: {
                            labels: ['6:00', '8:00', '10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00'],
                            data: [3, 8, 12, 10, 7, 13, 16, 14, 6]
                        },
                        rideTypes: {
                            labels: ['Стандартні', 'Термінові', 'Медичні', 'Соціальні'],
                            data: [45, 20, 35, 28]
                        },
                        ridePlanningType: {
                            labels: ['Заплановані', 'Звичайні'],
                            data: [35, 93]
                        }
                    };
                }

                data.totalDistance = parseFloat(data.totalDistance.toFixed(2));

                const totalRidesElement = document.getElementById('totalRides');
                const totalDistanceElement = document.getElementById('totalDistance');
                const totalScheduledElement = document.getElementById('totalScheduled');

                if (totalRidesElement) {
                    totalRidesElement.textContent = data.totalRides;
                    totalRidesElement.setAttribute('data-target', data.totalRides);
                }

                if (totalDistanceElement) {
                    totalDistanceElement.textContent = data.totalDistance.toFixed(2);
                    totalDistanceElement.setAttribute('data-target', data.totalDistance);
                }

                if (totalScheduledElement) {
                    totalScheduledElement.textContent = data.scheduledRides;
                    totalScheduledElement.setAttribute('data-target', data.scheduledRides);
                }

                animateCountersDriver();
                initDriverCharts(data);

            } catch (error) {
                console.error('Помилка при завантаженні статистики водія:', error);

                const statisticsCards = document.querySelectorAll('.card-body .chart-container');
                statisticsCards.forEach(container => {
                    container.innerHTML = '<div class="alert alert-warning">Не вдалося завантажити дані статистики</div>';
                });
            }
        }

        function initDriverCharts(data) {
            if (!data) {
                console.error('Відсутні дані для ініціалізації графіків');
                return;
            }

            function createChartSafely(elementId, chartType, chartData, chartOptions) {
                const canvas = document.getElementById(elementId);
                if (!canvas) {
                    console.warn(`Елемент з ID "${elementId}" не знайдено. Графік не буде створено.`);
                    return null;
                }

                try {
                    if (chartInstances[elementId]) {
                        chartInstances[elementId].destroy();
                        delete chartInstances[elementId];
                    }

                    const ctx = canvas.getContext('2d');
                    const newChart = new Chart(ctx, {
                        type: chartType,
                        data: chartData,
                        options: chartOptions
                    });

                    chartInstances[elementId] = newChart;
                    console.log(`Графік "${elementId}" успішно створено.`);
                    return newChart;
                } catch (error) {
                    console.error(`Помилка при створенні графіка для "${elementId}":`, error);
                    return null;
                }
            }

            const chartConfigs = [
                {
                    id: 'ridesByDayChart',
                    type: 'bar',
                    data: {
                        labels: data.ridesByDay.labels,
                        datasets: [{
                            label: 'Кількість поїздок',
                            data: data.ridesByDay.data,
                            backgroundColor: 'rgba(54, 162, 235, 0.7)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                },
                {
                    id: 'rideTypeChart',
                    type: 'pie',
                    data: {
                        labels: data.rideTypes.labels,
                        datasets: [{
                            data: data.rideTypes.data,
                            backgroundColor: [
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(255, 159, 64, 0.7)',
                                'rgba(153, 102, 255, 0.7)',
                                'rgba(255, 205, 86, 0.7)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                            },
                            title: {
                                display: true,
                                text: 'Розподіл за типом авто'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.label || '';
                                        let value = context.parsed || 0;
                                        return `${label}: ${value}`;
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    id: 'rideStatusChart',
                    type: 'doughnut',
                    data: {
                        labels: ['Завершені', 'Скасовані', 'В процесі'],
                        datasets: [{
                            data: data.rideStatuses,
                            backgroundColor: [
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(255, 99, 132, 0.7)',
                                'rgba(255, 206, 86, 0.7)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                            }
                        }
                    }
                },
                {
                    id: 'popularRoutesChart',
                    type: 'bar',
                    data: {
                        labels: data.popularRoutes.map(route => route.shortName),
                        datasets: [{
                            label: 'Кількість поїздок',
                            data: data.popularRoutes.map(route => route.count),
                            backgroundColor: 'rgba(153, 102, 255, 0.7)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        indexAxis: 'y',
                        scales: {
                            x: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            },
                            y: {
                                ticks: {
                                    callback: function(value, index) {
                                        return value.length > 25 ? value.substring(0, 22) + '...' : value;
                                    }
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    title: function(tooltipItems) {
                                        const index = tooltipItems[0].dataIndex;
                                        const route = data.popularRoutes[index];
                                        return [
                                            `Поїздок: ${route.count}`,
                                            `З: ${route.fullStart}`,
                                            `До: ${route.fullEnd}`
                                        ];
                                    },
                                    label: function() {
                                        return '';
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    id: 'activityHoursChart',
                    type: 'line',
                    data: {
                        labels: data.activityHours.labels,
                        datasets: [{
                            label: 'Кількість поїздок',
                            backgroundColor: 'rgba(255, 159, 64, 0.1)',
                            borderColor: 'rgba(255, 159, 64, 1)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4,
                            data: data.activityHours.data
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    precision: 0
                                }
                            }
                        }
                    }
                },
                {
                    id: 'ridePlanningChart',
                    type: 'pie',
                    data: {
                        labels: data.ridePlanningType.labels,
                        datasets: [{
                            data: data.ridePlanningType.data,
                            backgroundColor: [
                                'rgba(54, 162, 235, 0.7)',
                                'rgba(75, 192, 192, 0.7)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                }
            ];

            chartConfigs.forEach(config => {
                createChartSafely(config.id, config.type, config.data, config.options);
            });
        }

        function ensurePageLoaded() {
            console.log("Запуск ensurePageLoaded...");
            if (document.readyState === 'complete' || document.readyState === 'interactive') {
                const isDriverPage = document.querySelector('.card-header.bg-primary.text-white');
                if (isDriverPage) {
                    console.log("Сторінка водія виявлена, завантажуємо статистику...");
                    setTimeout(loadDriverStatistics, 100);
                }
            } else {
                document.addEventListener('DOMContentLoaded', function() {
                    const isDriverPage = document.querySelector('.card-header.bg-primary.text-white');
                    if (isDriverPage) {
                        setTimeout(loadDriverStatistics, 100);
                    }
                });
            }
        }

        ensurePageLoaded();
    </script>
}