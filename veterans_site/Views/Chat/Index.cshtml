@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<ApplicationUser>
@{
    ViewData["Title"] = "Чат для спілкування";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-users me-2"></i>Ветерани</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                            <tr>
                                <th>Користувач</th>
                                <th>Статус</th>
                                <th>Остання активність</th>
                                <th>Непрочитані</th>
                                <th>Дії</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var veteran in Model)
                            {
                                <tr data-user-id="@veteran.Id">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(veteran.AvatarPath))
                                            {
                                                <img src="@Url.Content(veteran.AvatarPath)" class="rounded-circle me-2" width="40" height="40" alt="@veteran.FirstName">
                                            }
                                            else
                                            {
                                                <div class="user-avatar me-2" style="width: 40px; height: 40px; background-color: #2e51a2; display: flex; align-items: center; justify-content: center; border-radius: 50%;">
                                                    <span class="text-white">@veteran.FirstName[0]</span>
                                                </div>
                                            }
                                            <div>
                                                <strong>@veteran.FirstName @veteran.LastName</strong>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                            <span id="status-@veteran.Id" class="badge @(veteran.IsOnline ? "bg-success" : "bg-secondary")">
                                                @(veteran.IsOnline ? "Онлайн" : "Офлайн")
                                            </span>
                                    </td>
                                    <td id="last-seen-@veteran.Id">
                                        @(veteran.IsOnline ? "Зараз на сайті" : $"Був(ла) {veteran.LastOnline.ToString("dd.MM.yyyy HH:mm")}")
                                    </td>
                                    <td>
                                        <span id="unread-count-@veteran.Id" class="badge bg-danger rounded-pill" style="display: none;"></span>
                                    </td>
                                    <td>
                                        <a asp-controller="Chat" asp-action="Conversation" asp-route-userId="@veteran.Id" class="btn btn-primary btn-sm">
                                            <i class="fas fa-comment me-1"></i> Написати
                                        </a>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.6/signalr.min.js"></script>
    <script>
        $(function() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .withAutomaticReconnect()
                .build();

            const currentUserId = '@ViewBag.CurrentUserId' || $('body').data('current-user-id');

            const unreadCounts = {};

            function updateUnreadCountsDisplay() {
                let totalUnread = 0;

                for (const userId in unreadCounts) {
                    const count = unreadCounts[userId];
                    const badge = $(`#unread-count-${userId}`);

                    if (count > 0) {
                        badge.text(count).show();
                        totalUnread += count;
                    } else {
                        badge.hide();
                    }
                }

                const totalBadge = $('#total-unread-count');
                if (totalUnread > 0) {
                    totalBadge.text(totalUnread).show();
                } else {
                    totalBadge.hide();
                }
            }

            function fetchInitialUnreadCounts() {
                $.get("/Chat/GetUnreadMessagesByUser", function(data) {
                    data.forEach(function(item) {
                        unreadCounts[item.senderId] = item.unreadCount;
                    });

                    updateUnreadCountsDisplay();
                });
            }

            connection.on("UserStatusChanged", function (userId, isOnline, lastSeen) {
                const statusElement = $(`#status-${userId}`);
                const lastSeenElement = $(`#last-seen-${userId}`);

                if (statusElement.length) {
                    if (isOnline) {
                        statusElement.removeClass("bg-secondary").addClass("bg-success");
                        statusElement.text("Онлайн");
                        lastSeenElement.text("Зараз на сайті");
                    } else {
                        statusElement.removeClass("bg-success").addClass("bg-secondary");
                        statusElement.text("Офлайн");

                        const lastSeenDate = new Date(lastSeen);
                        const formattedDate = `${lastSeenDate.getDate().toString().padStart(2, '0')}.${(lastSeenDate.getMonth() + 1).toString().padStart(2, '0')}.${lastSeenDate.getFullYear()} ${lastSeenDate.getHours().toString().padStart(2, '0')}:${lastSeenDate.getMinutes().toString().padStart(2, '0')}`;

                        lastSeenElement.text(`Був(ла) ${formattedDate}`);
                    }
                }
            });

            connection.on("UpdateUnreadMessageCount", function(receiverId) {
                if (currentUserId === receiverId) {
                    fetchInitialUnreadCounts();
                }
            });

            connection.on("ReceiveMessage", function(messageId, senderId, senderName, senderAvatar, message, sentAt) {
                if (unreadCounts[senderId] === undefined) {
                    unreadCounts[senderId] = 0;
                }
                unreadCounts[senderId]++;
                updateUnreadCountsDisplay();
            });

            connection.on("MessageRead", function(messageId, senderId, receiverId) {
                if (currentUserId === receiverId) {
                    if (unreadCounts[senderId] !== undefined) {
                        unreadCounts[senderId] = Math.max(0, unreadCounts[senderId] - 1);
                        updateUnreadCountsDisplay();
                    }
                }
                else if (currentUserId === senderId) {
                }
            });

            connection.on("UpdateAllUnreadCounts", function() {
                fetchInitialUnreadCounts();
            });

            connection.on("MessageDeleted", function(messageId) {
                fetchInitialUnreadCounts();
            });

            connection.on("MessageEdited", function(messageId, newContent) {
                fetchInitialUnreadCounts();
            });

            async function startConnection() {
                try {
                    await connection.start();
                    console.log("SignalR підключено.");
                    fetchInitialUnreadCounts();
                } catch (err) {
                    console.error("SignalR Connection Error:", err);
                    setTimeout(startConnection, 3000);
                }
            }

            startConnection();
        });
    
    </script>
}